
input
{
	beats
	{
		port => 5044
	}

}

filter
{
  if "beats" in [tags]
  {
    ruby
    {

      code => "event.set('logTime', event.get('@timestamp').to_i)"
        remove_field => ["@timestamp"]
    }
    mutate {
      convert => ["logTime","string"]
    }
  }  
  
  if "netbeats" in [tags]
	{
			if [dns][op_code] == "QUERY"
			{
				#drop{}
				mutate
				{
					remove_field => "[dns][answers]"
					remove_field => "[dns][question][name]"
					remove_field => "[dns][authorities]"
					add_tag => "dns"			
				}
			}

		if  [dest][port] {
			 mutate { rename => { "[dest][port]" => "[dest_port]" } }
		}
		if  [dest][stats][net_packets_total]  {

			 mutate { rename => { "[dest][stats][net_packets_total]" => "[dest_stats_net_packets_total]" } }
		}
		if  [dest][stats][net_bytes_total]  {
			 mutate { rename => { "[dest][stats][net_bytes_total]" => "[dest_stats_net_bytes_total]" } }
		}
		if  [dest][outer_ip] {
			 mutate { rename => { "[dest][outer_ip]" => "[dest_outer_ip]" } }
		}
		if  [dest][outer_ipv6_location] {
			 mutate { rename => { "[dest][outer_ipv6_location]" => "[dest_outer_ipv6_location]" } }
		}
		if  [dest][ipv6] {
			 mutate { rename => { "[dest][ipv6]" => "[dest_ipv6]" } }
		}
		if  [dest][outer_ipv6] {
			 mutate { rename => { "[dest][outer_ipv6]" => "[dest_outer_ipv6]" } }
		}
		if  [dest][ip] {
			 mutate { rename => { "[dest][ip]" => "[dest_ip]" } }
		}
		if  [dest][ipv6_location] {
			 mutate { rename => { "[dest][ipv6_location]" => "[dest_ipv6_location]" } }
		}
		if  [dest][outer_ip_location] {
			 mutate { rename => { "[dest][outer_ip_location]" => "[dest_outer_ip_location]" } }
		}
		if  [dest][mac] {
			 mutate { rename => { "[dest][mac]" => "[dest_mac]" } }
		}
		if  [dest][ip_location] {
			 mutate { rename => { "[dest][ip_location]" => "[dest_ip_location]" } }
		}
		if  [source][port] {
			 mutate { rename => { "[source][port]" => "[source_port]" } }
		}
		if  [source][stats][net_packets_total]  {
			 mutate { rename => { "[source][stats][net_packets_total]" => "[source_stats_net_packets_total]" } }
		}
		if  [source][stats][net_bytes_total]  {
			 mutate { rename => { "[source][stats][net_bytes_total]" => "[source_stats_net_bytes_total]" } }
		}
		if  [source][outer_ip] {
			 mutate { rename => { "[source][outer_ip]" => "[source_outer_ip]" } }
		}
		if  [source][outer_ipv6_location] {
			 mutate { rename => { "[source][outer_ipv6_location]" => "[source_outer_ipv6_location]" } }
		}
		if  [source][ipv6] {
			 mutate { rename => { "[source][ipv6]" => "[source_ipv6]" } }
		}
		if  [source][outer_ipv6] {
			 mutate { rename => { "[source][outer_ipv6]" => "[source_outer_ipv6]" } }
		}
		if  [source][ip] {
			 mutate { rename => { "[source][ip]" => "[source_ip]" } }
		}
		if  [source][ipv6_location] {
			 mutate { rename => { "[source][ipv6_location]" => "[source_ipv6_location]" } }
		}
		if  [source][outer_ip_location] {
			 mutate { rename => { "[source][outer_ip_location]" => "[source_outer_ip_location]" } }
		}
		if  [source][mac] {
			 mutate { rename => { "[source][mac]" => "[source_mac]" } }
		}
		if  [source][ip_location] {
			 mutate { rename => { "[source][ip_location]" => "[source_ip_location]" } }
		}
		if  [rpc][status] {
			 mutate { rename => { "[rpc][status]" => "[rpc_status]" } }
		}
		if  [rpc][time] {
			 mutate { rename => { "[rpc][time]" => "[rpc_time]" } }
		}
		if  [rpc][auth_flavor] {
			 mutate { rename => { "[rpc][auth_flavor]" => "[rpc_auth_flavor]" } }
		}
		if  [rpc][cred][machinename]  {
			 mutate { rename => { "[rpc][cred][machinename]" => "[rpc_cred_machinename]" } }
		}
		if  [rpc][cred][uid]  {
			 mutate { rename => { "[rpc][cred][uid]" => "[rpc_cred_uid]" } }
		}
		if  [rpc][cred][gids]  {
			 mutate { rename => { "[rpc][cred][gids]" => "[rpc_cred_gids]" } }
		}
		if  [rpc][cred][stamp]  {
			 mutate { rename => { "[rpc][cred][stamp]" => "[rpc_cred_stamp]" } }
		}
		if  [rpc][cred][gid]  {
			 mutate { rename => { "[rpc][cred][gid]" => "[rpc_cred_gid]" } }
		}
		if  [rpc][time_str] {
			 mutate { rename => { "[rpc][time_str]" => "[rpc_time_str]" } }
		}
		if  [rpc][xid] {
			 mutate { rename => { "[rpc][xid]" => "[rpc_xid]" } }
		}
		if  [rpc][call_size] {
			 mutate { rename => { "[rpc][call_size]" => "[rpc_call_size]" } }
		}
		if  [rpc][reply_size] {
			 mutate { rename => { "[rpc][reply_size]" => "[rpc_reply_size]" } }
		}
		if  [beat][version] {
			 mutate { rename => { "[beat][version]" => "[beat_version]" } }
		}
		if  [beat][hostname] {
			 mutate { rename => { "[beat][hostname]" => "[beat_hostname]" } }
		}
		if  [beat][name] {
			 mutate { rename => { "[beat][name]" => "[beat_name]" } }
		}
		if  [amqp][no-ack] {
			 mutate { rename => { "[amqp][no-ack]" => "[amqp_no-ack]" } }
		}
		if  [amqp][if-unused] {
			 mutate { rename => { "[amqp][if-unused]" => "[amqp_if-unused]" } }
		}
		if  [amqp][user-id] {
			 mutate { rename => { "[amqp][user-id]" => "[amqp_user-id]" } }
		}
		if  [amqp][exclusive] {
			 mutate { rename => { "[amqp][exclusive]" => "[amqp_exclusive]" } }
		}
		if  [amqp][reply-to] {
			 mutate { rename => { "[amqp][reply-to]" => "[amqp_reply-to]" } }
		}
		if  [amqp][timestamp] {
			 mutate { rename => { "[amqp][timestamp]" => "[amqp_timestamp]" } }
		}
		if  [amqp][priority] {
			 mutate { rename => { "[amqp][priority]" => "[amqp_priority]" } }
		}
		if  [amqp][auto-delete] {
			 mutate { rename => { "[amqp][auto-delete]" => "[amqp_auto-delete]" } }
		}
		if  [amqp][redelivered] {
			 mutate { rename => { "[amqp][redelivered]" => "[amqp_redelivered]" } }
		}
		if  [amqp][correlation-id] {
			 mutate { rename => { "[amqp][correlation-id]" => "[amqp_correlation-id]" } }
		}
		if  [amqp][exchange] {
			 mutate { rename => { "[amqp][exchange]" => "[amqp_exchange]" } }
		}
		if  [amqp][consumer-count] {
			 mutate { rename => { "[amqp][consumer-count]" => "[amqp_consumer-count]" } }
		}
		if  [amqp][multiple] {
			 mutate { rename => { "[amqp][multiple]" => "[amqp_multiple]" } }
		}
		if  [amqp][message-count] {
			 mutate { rename => { "[amqp][message-count]" => "[amqp_message-count]" } }
		}
		if  [amqp][reply-code] {
			 mutate { rename => { "[amqp][reply-code]" => "[amqp_reply-code]" } }
		}
		if  [amqp][content-encoding] {
			 mutate { rename => { "[amqp][content-encoding]" => "[amqp_content-encoding]" } }
		}
		if  [amqp][delivery-tag] {
			 mutate { rename => { "[amqp][delivery-tag]" => "[amqp_delivery-tag]" } }
		}
		if  [amqp][no-wait] {
			 mutate { rename => { "[amqp][no-wait]" => "[amqp_no-wait]" } }
		}
		if  [amqp][immediate] {
			 mutate { rename => { "[amqp][immediate]" => "[amqp_immediate]" } }
		}
		if  [amqp][class-id] {
			 mutate { rename => { "[amqp][class-id]" => "[amqp_class-id]" } }
		}
		if  [amqp][content-type] {
			 mutate { rename => { "[amqp][content-type]" => "[amqp_content-type]" } }
		}
		if  [amqp][no-local] {
			 mutate { rename => { "[amqp][no-local]" => "[amqp_no-local]" } }
		}
		if  [amqp][message-id] {
			 mutate { rename => { "[amqp][message-id]" => "[amqp_message-id]" } }
		}
		if  [amqp][expiration] {
			 mutate { rename => { "[amqp][expiration]" => "[amqp_expiration]" } }
		}
		if  [amqp][reply-text] {
			 mutate { rename => { "[amqp][reply-text]" => "[amqp_reply-text]" } }
		}
		if  [amqp][method-id] {
			 mutate { rename => { "[amqp][method-id]" => "[amqp_method-id]" } }
		}
		if  [amqp][passive] {
			 mutate { rename => { "[amqp][passive]" => "[amqp_passive]" } }
		}
		if  [amqp][if-empty] {
			 mutate { rename => { "[amqp][if-empty]" => "[amqp_if-empty]" } }
		}
		if  [amqp][delivery-mode] {
			 mutate { rename => { "[amqp][delivery-mode]" => "[amqp_delivery-mode]" } }
		}
		if  [amqp][app-id] {
			 mutate { rename => { "[amqp][app-id]" => "[amqp_app-id]" } }
		}
		if  [amqp][exchange-type] {
			 mutate { rename => { "[amqp][exchange-type]" => "[amqp_exchange-type]" } }
		}
		if  [amqp][durable] {
			 mutate { rename => { "[amqp][durable]" => "[amqp_durable]" } }
		}
		if  [amqp][routing-key] {
			 mutate { rename => { "[amqp][routing-key]" => "[amqp_routing-key]" } }
		}
		if  [amqp][mandatory] {
			 mutate { rename => { "[amqp][mandatory]" => "[amqp_mandatory]" } }
		}
		if  [amqp][queue] {
			 mutate { rename => { "[amqp][queue]" => "[amqp_queue]" } }
		}
		if  [amqp][consumer-tag] {
			 mutate { rename => { "[amqp][consumer-tag]" => "[amqp_consumer-tag]" } }
		}
		if  [amqp][type] {
			 mutate { rename => { "[amqp][type]" => "[amqp_type]" } }
		}
		if  [meta][cloud][provider]  {
			 mutate { rename => { "[meta][cloud][provider]" => "[meta_cloud_provider]" } }
		}
		if  [meta][cloud][region]  {
			 mutate { rename => { "[meta][cloud][region]" => "[meta_cloud_region]" } }
		}
		if  [meta][cloud][machine_type]  {
			 mutate { rename => { "[meta][cloud][machine_type]" => "[meta_cloud_machine_type]" } }
		}
		if  [meta][cloud][instance_id]  {
			 mutate { rename => { "[meta][cloud][instance_id]" => "[meta_cloud_instance_id]" } }
		}
		if  [meta][cloud][availability_zone]  {
			 mutate { rename => { "[meta][cloud][availability_zone]" => "[meta_cloud_availability_zone]" } }
		}
		if  [meta][cloud][project_id]  {
			 mutate { rename => { "[meta][cloud][project_id]" => "[meta_cloud_project_id]" } }
		}
		if  [thrift][service] {
			 mutate { rename => { "[thrift][service]" => "[thrift_service]" } }
		}
		if  [thrift][params] {
			 mutate { rename => { "[thrift][params]" => "[thrift_params]" } }
		}
		if  [thrift][exceptions] {
			 mutate { rename => { "[thrift][exceptions]" => "[thrift_exceptions]" } }
		}
		if  [thrift][return_value] {
			 mutate { rename => { "[thrift][return_value]" => "[thrift_return_value]" } }
		}
		if  [http][response][code]  {
			 mutate { rename => { "[http][response][code]" => "[http_response_code]" } }
		}
		if  [http][response][body]  {
			 mutate { rename => { "[http][response][body]" => "[http_response_body]" } }
		}
		if  [http][response][phrase]  {
			 mutate { rename => { "[http][response][phrase]" => "[http_response_phrase]" } }
		}
		if  [http][request][params]  {
			 mutate { rename => { "[http][request][params]" => "[http_request_params]" } }
		}
		if  [http][request][body]  {
			 mutate { rename => { "[http][request][body]" => "[http_request_body]" } }
		}
		if  [memcache][response][status]  {
			 mutate { rename => { "[memcache][response][status]" => "[memcache_response_status]" } }
		}
		if  [memcache][response][bytes]  {
			 mutate { rename => { "[memcache][response][bytes]" => "[memcache_response_bytes]" } }
		}
		if  [memcache][response][value]  {
			 mutate { rename => { "[memcache][response][value]" => "[memcache_response_value]" } }
		}
		if  [memcache][response][flags]  {
			 mutate { rename => { "[memcache][response][flags]" => "[memcache_response_flags]" } }
		}
		if  [memcache][response][status_code]  {
			 mutate { rename => { "[memcache][response][status_code]" => "[memcache_response_status_code]" } }
		}
		if  [memcache][response][cas_unique]  {
			 mutate { rename => { "[memcache][response][cas_unique]" => "[memcache_response_cas_unique]" } }
		}
		if  [memcache][response][error_msg]  {
			 mutate { rename => { "[memcache][response][error_msg]" => "[memcache_response_error_msg]" } }
		}
		if  [memcache][response][opcode_value]  {
			 mutate { rename => { "[memcache][response][opcode_value]" => "[memcache_response_opcode_value]" } }
		}
		if  [memcache][response][count_values]  {
			 mutate { rename => { "[memcache][response][count_values]" => "[memcache_response_count_values]" } }
		}
		if  [memcache][response][command]  {
			 mutate { rename => { "[memcache][response][command]" => "[memcache_response_command]" } }
		}
		if  [memcache][response][opaque]  {
			 mutate { rename => { "[memcache][response][opaque]" => "[memcache_response_opaque]" } }
		}
		if  [memcache][response][opcode]  {
			 mutate { rename => { "[memcache][response][opcode]" => "[memcache_response_opcode]" } }
		}
		if  [memcache][response][version]  {
			 mutate { rename => { "[memcache][response][version]" => "[memcache_response_version]" } }
		}
		if  [memcache][response][type]  {
			 mutate { rename => { "[memcache][response][type]" => "[memcache_response_type]" } }
		}
		if  [memcache][protocol_type] {
			 mutate { rename => { "[memcache][protocol_type]" => "[memcache_protocol_type]" } }
		}
		if  [memcache][request][raw_args]  {
			 mutate { rename => { "[memcache][request][raw_args]" => "[memcache_request_raw_args]" } }
		}
		if  [memcache][request][bytes]  {
			 mutate { rename => { "[memcache][request][bytes]" => "[memcache_request_bytes]" } }
		}
		if  [memcache][request][verbosity]  {
			 mutate { rename => { "[memcache][request][verbosity]" => "[memcache_request_verbosity]" } }
		}
		if  [memcache][request][delta]  {
			 mutate { rename => { "[memcache][request][delta]" => "[memcache_request_delta]" } }
		}
		if  [memcache][request][source_class]  {
			 mutate { rename => { "[memcache][request][source_class]" => "[memcache_request_source_class]" } }
		}
		if  [memcache][request][count_values]  {
			 mutate { rename => { "[memcache][request][count_values]" => "[memcache_request_count_values]" } }
		}
		if  [memcache][request][initial]  {
			 mutate { rename => { "[memcache][request][initial]" => "[memcache_request_initial]" } }
		}
		if  [memcache][request][line]  {
			 mutate { rename => { "[memcache][request][line]" => "[memcache_request_line]" } }
		}
		if  [memcache][request][command]  {
			 mutate { rename => { "[memcache][request][command]" => "[memcache_request_command]" } }
		}
		if  [memcache][request][opaque]  {
			 mutate { rename => { "[memcache][request][opaque]" => "[memcache_request_opaque]" } }
		}
		if  [memcache][request][opcode]  {
			 mutate { rename => { "[memcache][request][opcode]" => "[memcache_request_opcode]" } }
		}
		if  [memcache][request][quiet]  {
			 mutate { rename => { "[memcache][request][quiet]" => "[memcache_request_quiet]" } }
		}
		if  [memcache][request][flags]  {
			 mutate { rename => { "[memcache][request][flags]" => "[memcache_request_flags]" } }
		}
		if  [memcache][request][automove]  {
			 mutate { rename => { "[memcache][request][automove]" => "[memcache_request_automove]" } }
		}
		if  [memcache][request][cas_unique]  {
			 mutate { rename => { "[memcache][request][cas_unique]" => "[memcache_request_cas_unique]" } }
		}
		if  [memcache][request][dest_class]  {
			 mutate { rename => { "[memcache][request][dest_class]" => "[memcache_request_dest_class]" } }
		}
		if  [memcache][request][opcode_value]  {
			 mutate { rename => { "[memcache][request][opcode_value]" => "[memcache_request_opcode_value]" } }
		}
		if  [memcache][request][exptime]  {
			 mutate { rename => { "[memcache][request][exptime]" => "[memcache_request_exptime]" } }
		}
		if  [memcache][request][vbucket]  {
			 mutate { rename => { "[memcache][request][vbucket]" => "[memcache_request_vbucket]" } }
		}
		if  [memcache][request][sleep_us]  {
			 mutate { rename => { "[memcache][request][sleep_us]" => "[memcache_request_sleep_us]" } }
		}
		if  [memcache][request][noreply]  {
			 mutate { rename => { "[memcache][request][noreply]" => "[memcache_request_noreply]" } }
		}
		if  [memcache][request][type]  {
			 mutate { rename => { "[memcache][request][type]" => "[memcache_request_type]" } }
		}
		if  [nfs][tag] {
			 mutate { rename => { "[nfs][tag]" => "[nfs_tag]" } }
		}
		if  [nfs][status] {
			 mutate { rename => { "[nfs][status]" => "[nfs_status]" } }
		}
		if  [nfs][minor_version] {
			 mutate { rename => { "[nfs][minor_version]" => "[nfs_minor_version]" } }
		}
		if  [nfs][opcode] {
			 mutate { rename => { "[nfs][opcode]" => "[nfs_opcode]" } }
		}
		if  [nfs][version] {
			 mutate { rename => { "[nfs][version]" => "[nfs_version]" } }
		}
		if  [redis][error] {
			 mutate { rename => { "[redis][error]" => "[redis_error]" } }
		}
		if  [redis][return_value] {
			 mutate { rename => { "[redis][return_value]" => "[redis_return_value]" } }
		}
		if  [client_geoip][location] {
			 mutate { rename => { "[client_geoip][location]" => "[client_geoip_location]" } }
		}
		if  [cassandra][response][headers][op]  {
			 mutate { rename => { "[cassandra][response][headers][op]" => "[cassandra_response_headers_op]" } }
		}
		if  [cassandra][response][headers][version]  {
			 mutate { rename => { "[cassandra][response][headers][version]" => "[cassandra_response_headers_version]" } }
		}
		if  [cassandra][response][headers][stream]  {
			 mutate { rename => { "[cassandra][response][headers][stream]" => "[cassandra_response_headers_stream]" } }
		}
		if  [cassandra][response][headers][flags]  {
			 mutate { rename => { "[cassandra][response][headers][flags]" => "[cassandra_response_headers_flags]" } }
		}
		if  [cassandra][response][headers][length]  {
			 mutate { rename => { "[cassandra][response][headers][length]" => "[cassandra_response_headers_length]" } }
		}
		if  [cassandra][response][authentication][class]  {
			 mutate { rename => { "[cassandra][response][authentication][class]" => "[cassandra_response_authentication_class]" } }
		}
		if  [cassandra][response][error][code]  {
			 mutate { rename => { "[cassandra][response][error][code]" => "[cassandra_response_error_code]" } }
		}
		if  [cassandra][response][error][type]  {
			 mutate { rename => { "[cassandra][response][error][type]" => "[cassandra_response_error_type]" } }
		}
		if  [cassandra][response][error][msg]  {
			 mutate { rename => { "[cassandra][response][error][msg]" => "[cassandra_response_error_msg]" } }
		}
		if  [cassandra][response][error][details][required]  {
			 mutate { rename => { "[cassandra][response][error][details][required]" => "[cassandra_response_error_details_required]" } }
		}
		if  [cassandra][response][error][details][function]  {
			 mutate { rename => { "[cassandra][response][error][details][function]" => "[cassandra_response_error_details_function]" } }
		}
		if  [cassandra][response][error][details][keyspace]  {
			 mutate { rename => { "[cassandra][response][error][details][keyspace]" => "[cassandra_response_error_details_keyspace]" } }
		}
		if  [cassandra][response][error][details][blockfor]  {
			 mutate { rename => { "[cassandra][response][error][details][blockfor]" => "[cassandra_response_error_details_blockfor]" } }
		}
		if  [cassandra][response][error][details][arg_types]  {
			 mutate { rename => { "[cassandra][response][error][details][arg_types]" => "[cassandra_response_error_details_arg_types]" } }
		}
		if  [cassandra][response][error][details][data_present]  {
			 mutate { rename => { "[cassandra][response][error][details][data_present]" => "[cassandra_response_error_details_data_present]" } }
		}
		if  [cassandra][response][error][details][write_type]  {
			 mutate { rename => { "[cassandra][response][error][details][write_type]" => "[cassandra_response_error_details_write_type]" } }
		}
		if  [cassandra][response][error][details][alive]  {
			 mutate { rename => { "[cassandra][response][error][details][alive]" => "[cassandra_response_error_details_alive]" } }
		}
		if  [cassandra][response][error][details][num_failures]  {
			 mutate { rename => { "[cassandra][response][error][details][num_failures]" => "[cassandra_response_error_details_num_failures]" } }
		}
		if  [cassandra][response][error][details][stmt_id]  {
			 mutate { rename => { "[cassandra][response][error][details][stmt_id]" => "[cassandra_response_error_details_stmt_id]" } }
		}
		if  [cassandra][response][error][details][read_consistency]  {
			 mutate { rename => { "[cassandra][response][error][details][read_consistency]" => "[cassandra_response_error_details_read_consistency]" } }
		}
		if  [cassandra][response][error][details][table]  {
			 mutate { rename => { "[cassandra][response][error][details][table]" => "[cassandra_response_error_details_table]" } }
		}
		if  [cassandra][response][error][details][received]  {
			 mutate { rename => { "[cassandra][response][error][details][received]" => "[cassandra_response_error_details_received]" } }
		}
		if  [cassandra][response][warnings]  {
			 mutate { rename => { "[cassandra][response][warnings]" => "[cassandra_response_warnings]" } }
		}
		if  [cassandra][response][result][keyspace]  {
			 mutate { rename => { "[cassandra][response][result][keyspace]" => "[cassandra_response_result_keyspace]" } }
		}
		if  [cassandra][response][result][prepared][resp_meta][keyspace]   {
			 mutate { rename => { "[cassandra][response][result][prepared][resp_meta][keyspace]" => "[cassandra_response_result_prepared_resp_meta_keyspace]" } }
		}
		if  [cassandra][response][result][prepared][resp_meta][flags]   {
			 mutate { rename => { "[cassandra][response][result][prepared][resp_meta][flags]" => "[cassandra_response_result_prepared_resp_meta_flags]" } }
		}
		if  [cassandra][response][result][prepared][resp_meta][pkey_columns]   {
			 mutate { rename => { "[cassandra][response][result][prepared][resp_meta][pkey_columns]" => "[cassandra_response_result_prepared_resp_meta_pkey_columns]" } }
		}
		if  [cassandra][response][result][prepared][resp_meta][col_count]   {
			 mutate { rename => { "[cassandra][response][result][prepared][resp_meta][col_count]" => "[cassandra_response_result_prepared_resp_meta_col_count]" } }
		}
		if  [cassandra][response][result][prepared][resp_meta][table]   {
			 mutate { rename => { "[cassandra][response][result][prepared][resp_meta][table]" => "[cassandra_response_result_prepared_resp_meta_table]" } }
		}
		if  [cassandra][response][result][prepared][resp_meta][paging_state]   {
			 mutate { rename => { "[cassandra][response][result][prepared][resp_meta][paging_state]" => "[cassandra_response_result_prepared_resp_meta_paging_state]" } }
		}
		if  [cassandra][response][result][prepared][req_meta][keyspace]   {
			 mutate { rename => { "[cassandra][response][result][prepared][req_meta][keyspace]" => "[cassandra_response_result_prepared_req_meta_keyspace]" } }
		}
		if  [cassandra][response][result][prepared][req_meta][flags]   {
			 mutate { rename => { "[cassandra][response][result][prepared][req_meta][flags]" => "[cassandra_response_result_prepared_req_meta_flags]" } }
		}
		if  [cassandra][response][result][prepared][req_meta][pkey_columns]   {
			 mutate { rename => { "[cassandra][response][result][prepared][req_meta][pkey_columns]" => "[cassandra_response_result_prepared_req_meta_pkey_columns]" } }
		}
		if  [cassandra][response][result][prepared][req_meta][col_count]   {
			 mutate { rename => { "[cassandra][response][result][prepared][req_meta][col_count]" => "[cassandra_response_result_prepared_req_meta_col_count]" } }
		}
		if  [cassandra][response][result][prepared][req_meta][table]   {
			 mutate { rename => { "[cassandra][response][result][prepared][req_meta][table]" => "[cassandra_response_result_prepared_req_meta_table]" } }
		}
		if  [cassandra][response][result][prepared][req_meta][paging_state]   {
			 mutate { rename => { "[cassandra][response][result][prepared][req_meta][paging_state]" => "[cassandra_response_result_prepared_req_meta_paging_state]" } }
		}
		if  [cassandra][response][result][prepared][prepared_id]  {
			 mutate { rename => { "[cassandra][response][result][prepared][prepared_id]" => "[cassandra_response_result_prepared_prepared_id]" } }
		}
		if  [cassandra][response][result][schema_change][args]  {
			 mutate { rename => { "[cassandra][response][result][schema_change][args]" => "[cassandra_response_result_schema_change_args]" } }
		}
		if  [cassandra][response][result][schema_change][name]  {
			 mutate { rename => { "[cassandra][response][result][schema_change][name]" => "[cassandra_response_result_schema_change_name]" } }
		}
		if  [cassandra][response][result][schema_change][target]  {
			 mutate { rename => { "[cassandra][response][result][schema_change][target]" => "[cassandra_response_result_schema_change_target]" } }
		}
		if  [cassandra][response][result][schema_change][keyspace]  {
			 mutate { rename => { "[cassandra][response][result][schema_change][keyspace]" => "[cassandra_response_result_schema_change_keyspace]" } }
		}
		if  [cassandra][response][result][schema_change][change]  {
			 mutate { rename => { "[cassandra][response][result][schema_change][change]" => "[cassandra_response_result_schema_change_change]" } }
		}
		if  [cassandra][response][result][schema_change][table]  {
			 mutate { rename => { "[cassandra][response][result][schema_change][table]" => "[cassandra_response_result_schema_change_table]" } }
		}
		if  [cassandra][response][result][schema_change][object]  {
			 mutate { rename => { "[cassandra][response][result][schema_change][object]" => "[cassandra_response_result_schema_change_object]" } }
		}
		if  [cassandra][response][result][type]  {
			 mutate { rename => { "[cassandra][response][result][type]" => "[cassandra_response_result_type]" } }
		}
		if  [cassandra][response][result][rows][meta][keyspace]   {
			 mutate { rename => { "[cassandra][response][result][rows][meta][keyspace]" => "[cassandra_response_result_rows_meta_keyspace]" } }
		}
		if  [cassandra][response][result][rows][meta][flags]   {
			 mutate { rename => { "[cassandra][response][result][rows][meta][flags]" => "[cassandra_response_result_rows_meta_flags]" } }
		}
		if  [cassandra][response][result][rows][meta][pkey_columns]   {
			 mutate { rename => { "[cassandra][response][result][rows][meta][pkey_columns]" => "[cassandra_response_result_rows_meta_pkey_columns]" } }
		}
		if  [cassandra][response][result][rows][meta][col_count]   {
			 mutate { rename => { "[cassandra][response][result][rows][meta][col_count]" => "[cassandra_response_result_rows_meta_col_count]" } }
		}
		if  [cassandra][response][result][rows][meta][table]   {
			 mutate { rename => { "[cassandra][response][result][rows][meta][table]" => "[cassandra_response_result_rows_meta_table]" } }
		}
		if  [cassandra][response][result][rows][meta][paging_state]   {
			 mutate { rename => { "[cassandra][response][result][rows][meta][paging_state]" => "[cassandra_response_result_rows_meta_paging_state]" } }
		}
		if  [cassandra][response][result][rows][num_rows]  {
			 mutate { rename => { "[cassandra][response][result][rows][num_rows]" => "[cassandra_response_result_rows_num_rows]" } }
		}
		if  [cassandra][response][event][schema_change][args]  {
			 mutate { rename => { "[cassandra][response][event][schema_change][args]" => "[cassandra_response_event_schema_change_args]" } }
		}
		if  [cassandra][response][event][schema_change][name]  {
			 mutate { rename => { "[cassandra][response][event][schema_change][name]" => "[cassandra_response_event_schema_change_name]" } }
		}
		if  [cassandra][response][event][schema_change][target]  {
			 mutate { rename => { "[cassandra][response][event][schema_change][target]" => "[cassandra_response_event_schema_change_target]" } }
		}
		if  [cassandra][response][event][schema_change][keyspace]  {
			 mutate { rename => { "[cassandra][response][event][schema_change][keyspace]" => "[cassandra_response_event_schema_change_keyspace]" } }
		}
		if  [cassandra][response][event][schema_change][change]  {
			 mutate { rename => { "[cassandra][response][event][schema_change][change]" => "[cassandra_response_event_schema_change_change]" } }
		}
		if  [cassandra][response][event][schema_change][table]  {
			 mutate { rename => { "[cassandra][response][event][schema_change][table]" => "[cassandra_response_event_schema_change_table]" } }
		}
		if  [cassandra][response][event][schema_change][object]  {
			 mutate { rename => { "[cassandra][response][event][schema_change][object]" => "[cassandra_response_event_schema_change_object]" } }
		}
		if  [cassandra][response][event][change]  {
			 mutate { rename => { "[cassandra][response][event][change]" => "[cassandra_response_event_change]" } }
		}
		if  [cassandra][response][event][type]  {
			 mutate { rename => { "[cassandra][response][event][type]" => "[cassandra_response_event_type]" } }
		}
		if  [cassandra][response][event][port]  {
			 mutate { rename => { "[cassandra][response][event][port]" => "[cassandra_response_event_port]" } }
		}
		if  [cassandra][response][event][host]  {
			 mutate { rename => { "[cassandra][response][event][host]" => "[cassandra_response_event_host]" } }
		}
		if  [cassandra][request][headers][op]  {
			 mutate { rename => { "[cassandra][request][headers][op]" => "[cassandra_request_headers_op]" } }
		}
		if  [cassandra][request][headers][version]  {
			 mutate { rename => { "[cassandra][request][headers][version]" => "[cassandra_request_headers_version]" } }
		}
		if  [cassandra][request][headers][stream]  {
			 mutate { rename => { "[cassandra][request][headers][stream]" => "[cassandra_request_headers_stream]" } }
		}
		if  [cassandra][request][headers][flags]  {
			 mutate { rename => { "[cassandra][request][headers][flags]" => "[cassandra_request_headers_flags]" } }
		}
		if  [cassandra][request][headers][length]  {
			 mutate { rename => { "[cassandra][request][headers][length]" => "[cassandra_request_headers_length]" } }
		}
		if  [cassandra][request][query]  {
			 mutate { rename => { "[cassandra][request][query]" => "[cassandra_request_query]" } }
		}
		if  [mysql][iserror] {
			 mutate { rename => { "[mysql][iserror]" => "[mysql_iserror]" } }
		}
		if  [mysql][affected_rows] {
			 mutate { rename => { "[mysql][affected_rows]" => "[mysql_affected_rows]" } }
		}
		if  [mysql][num_fields] {
			 mutate { rename => { "[mysql][num_fields]" => "[mysql_num_fields]" } }
		}
		if  [mysql][error_code] {
			 mutate { rename => { "[mysql][error_code]" => "[mysql_error_code]" } }
		}
		if  [mysql][num_rows] {
			 mutate { rename => { "[mysql][num_rows]" => "[mysql_num_rows]" } }
		}
		if  [mysql][insert_id] {
			 mutate { rename => { "[mysql][insert_id]" => "[mysql_insert_id]" } }
		}
		if  [mysql][error_message] {
			 mutate { rename => { "[mysql][error_message]" => "[mysql_error_message]" } }
		}
		if  [mysql][query] {
			 mutate { rename => { "[mysql][query]" => "[mysql_query]" } }
		}
		if  [mongodb][fullCollectionName] {
			 mutate { rename => { "[mongodb][fullCollectionName]" => "[mongodb_fullCollectionName]" } }
		}
		if  [mongodb][returnFieldsSelector] {
			 mutate { rename => { "[mongodb][returnFieldsSelector]" => "[mongodb_returnFieldsSelector]" } }
		}
		if  [mongodb][query] {
			 mutate { rename => { "[mongodb][query]" => "[mongodb_query]" } }
		}
		if  [mongodb][startingFrom] {
			 mutate { rename => { "[mongodb][startingFrom]" => "[mongodb_startingFrom]" } }
		}
		if  [mongodb][selector] {
			 mutate { rename => { "[mongodb][selector]" => "[mongodb_selector]" } }
		}
		if  [mongodb][error] {
			 mutate { rename => { "[mongodb][error]" => "[mongodb_error]" } }
		}
		if  [mongodb][numberReturned] {
			 mutate { rename => { "[mongodb][numberReturned]" => "[mongodb_numberReturned]" } }
		}
		if  [mongodb][numberToReturn] {
			 mutate { rename => { "[mongodb][numberToReturn]" => "[mongodb_numberToReturn]" } }
		}
		if  [mongodb][update] {
			 mutate { rename => { "[mongodb][update]" => "[mongodb_update]" } }
		}
		if  [mongodb][numberToSkip] {
			 mutate { rename => { "[mongodb][numberToSkip]" => "[mongodb_numberToSkip]" } }
		}
		if  [mongodb][cursorId] {
			 mutate { rename => { "[mongodb][cursorId]" => "[mongodb_cursorId]" } }
		}
		if  [dns][authorities_count] {
			 mutate { rename => { "[dns][authorities_count]" => "[dns_authorities_count]" } }
		}
		if  [dns][additionals_count] {
			 mutate { rename => { "[dns][additionals_count]" => "[dns_additionals_count]" } }
		}
		if  [dns][opt][version]  {
			 mutate { rename => { "[dns][opt][version]" => "[dns_opt_version]" } }
		}
		if  [dns][opt][udp_size]  {
			 mutate { rename => { "[dns][opt][udp_size]" => "[dns_opt_udp_size]" } }
		}
		if  [dns][opt][do]  {
			 mutate { rename => { "[dns][opt][do]" => "[dns_opt_do]" } }
		}
		if  [dns][opt][ext_rcode]  {
			 mutate { rename => { "[dns][opt][ext_rcode]" => "[dns_opt_ext_rcode]" } }
		}
		if  [dns][flags][authoritative]  {
			 mutate { rename => { "[dns][flags][authoritative]" => "[dns_flags_authoritative]" } }
		}
		if  [dns][flags][checking_disabled]  {
			 mutate { rename => { "[dns][flags][checking_disabled]" => "[dns_flags_checking_disabled]" } }
		}
		if  [dns][flags][recursion_desired]  {
			 mutate { rename => { "[dns][flags][recursion_desired]" => "[dns_flags_recursion_desired]" } }
		}
		if  [dns][flags][recursion_available]  {
			 mutate { rename => { "[dns][flags][recursion_available]" => "[dns_flags_recursion_available]" } }
		}
		if  [dns][flags][authentic_data]  {
			 mutate { rename => { "[dns][flags][authentic_data]" => "[dns_flags_authentic_data]" } }
		}
		if  [dns][flags][truncated_response]  {
			 mutate { rename => { "[dns][flags][truncated_response]" => "[dns_flags_truncated_response]" } }
		}
		if  [dns][answers][ttl]  {
			 mutate { rename => { "[dns][answers][ttl]" => "[dns_answers_ttl]" } }
		}
		if  [dns][answers][name]  {
			 mutate { rename => { "[dns][answers][name]" => "[dns_answers_name]" } }
		}
		if  [dns][answers][data]  {
			 mutate { rename => { "[dns][answers][data]" => "[dns_answers_data]" } }
		}
		if  [dns][answers][class]  {
			 mutate { rename => { "[dns][answers][class]" => "[dns_answers_class]" } }
		}
		if  [dns][answers][type]  {
			 mutate { rename => { "[dns][answers][type]" => "[dns_answers_type]" } }
		}
		if  [dns][id] {
			 mutate { rename => { "[dns][id]" => "[dns_id]" } }
		}
		if  [dns][response_code] {
			 mutate { rename => { "[dns][response_code]" => "[dns_response_code]" } }
		}
		if  [dns][question][name]  {
			 mutate { rename => { "[dns][question][name]" => "[dns_question_name]" } }
		}
		if  [dns][question][etld_plus_one]  {
			 mutate { rename => { "[dns][question][etld_plus_one]" => "[dns_question_etld_plus_one]" } }
		}
		if  [dns][question][class]  {
			 mutate { rename => { "[dns][question][class]" => "[dns_question_class]" } }
		}
		if  [dns][question][type]  {
			 mutate { rename => { "[dns][question][type]" => "[dns_question_type]" } }
		}
		if  [dns][op_code] {
			 mutate { rename => { "[dns][op_code]" => "[dns_op_code]" } }
		}
		if  [dns][authorities][name]  {
			 mutate { rename => { "[dns][authorities][name]" => "[dns_authorities_name]" } }
		}
		if  [dns][authorities][class]  {
			 mutate { rename => { "[dns][authorities][class]" => "[dns_authorities_class]" } }
		}
		if  [dns][authorities][type]  {
			 mutate { rename => { "[dns][authorities][type]" => "[dns_authorities_type]" } }
		}
		if  [dns][additionals][ttl]  {
			 mutate { rename => { "[dns][additionals][ttl]" => "[dns_additionals_ttl]" } }
		}
		if  [dns][additionals][name]  {
			 mutate { rename => { "[dns][additionals][name]" => "[dns_additionals_name]" } }
		}
		if  [dns][additionals][data]  {
			 mutate { rename => { "[dns][additionals][data]" => "[dns_additionals_data]" } }
		}
		if  [dns][additionals][class]  {
			 mutate { rename => { "[dns][additionals][class]" => "[dns_additionals_class]" } }
		}
		if  [dns][additionals][type]  {
			 mutate { rename => { "[dns][additionals][type]" => "[dns_additionals_type]" } }
		}
		if  [dns][answers_count] {
			 mutate { rename => { "[dns][answers_count]" => "[dns_answers_count]" } }
		}
		if  [pgsql][iserror] {
			 mutate { rename => { "[pgsql][iserror]" => "[pgsql_iserror]" } }
		}
		if  [pgsql][query] {
			 mutate { rename => { "[pgsql][query]" => "[pgsql_query]" } }
		}
		if  [pgsql][num_fields] {
			 mutate { rename => { "[pgsql][num_fields]" => "[pgsql_num_fields]" } }
		}
		if  [pgsql][error_code] {
			 mutate { rename => { "[pgsql][error_code]" => "[pgsql_error_code]" } }
		}
		if  [pgsql][num_rows] {
			 mutate { rename => { "[pgsql][num_rows]" => "[pgsql_num_rows]" } }
		}
		if  [pgsql][error_message] {
			 mutate { rename => { "[pgsql][error_message]" => "[pgsql_error_message]" } }
		}
		if  [pgsql][error_severity] {
			 mutate { rename => { "[pgsql][error_severity]" => "[pgsql_error_severity]" } }
		}
		if  [icmp][version] {
			 mutate { rename => { "[icmp][version]" => "[icmp_version]" } }
		}
		if  [icmp][response][code]  {
			 mutate { rename => { "[icmp][response][code]" => "[icmp_response_code]" } }
		}
		if  [icmp][response][message]  {
			 mutate { rename => { "[icmp][response][message]" => "[icmp_response_message]" } }
		}
		if  [icmp][response][type]  {
			 mutate { rename => { "[icmp][response][type]" => "[icmp_response_type]" } }
		}
		if  [icmp][request][code]  {
			 mutate { rename => { "[icmp][request][code]" => "[icmp_request_code]" } }
		}
		if  [icmp][request][message]  {
			 mutate { rename => { "[icmp][request][message]" => "[icmp_request_message]" } }
		}
		if  [icmp][request][type]  {
			 mutate { rename => { "[icmp][request][type]" => "[icmp_request_type]" } }
		}

		ruby {
			code => "
			hash = event.to_hash
			hash.each do |k,v|
				if v.class == Hash
					event.remove(k)
				end
			end
					"
		}
	}
}

output
{
	if "netbeats" in [tags]
	{
	  cv  
	    {
	      hostname_cv => "<CSHost>"
	      http_method => "post"
	      username_cv => "<Username>"
	      password_cv => "<Password>"
	      datasourcename_cv => "packet"
	      idle_flush_time => 5
	      flush_size => 100
	      format => "json"
	      analytics_engine_name => "<Analytics engine client name>"
	      template_file => "<TemplateFileLocation>"
	    }
    }
}